name: Build Qt Application

on:
  push:
    branches: [ "master" ] # 当主分支有更新时触发
  pull_request:
    branches: [ "master" ] # 当有 PR 到主分支时触发

jobs:
  build-windows:
    runs-on: windows-latest # 指定在 Windows 服务器上运行

    env:
      QT_VERSION: '6.5.3' # 这里设置环境变量，方便复用

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 检出你的代码

      # --- 前端构建步骤 ---
      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8 # 指定 pnpm 版本

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 指定 Node.js 版本
          cache: 'pnpm' # 为 pnpm 启用缓存，加快后续构建速度
          cache-dependency-path: 'web/vue-proj/pnpm-lock.yaml'

      - name: Install Vue dependencies
        working-directory: ./web/vue-proj # 指定工作目录
        run: pnpm install # 安装依赖

      - name: Build Vue Project
        working-directory: ./web/vue-proj # 指定工作目录
        run: pnpm build # 执行构建命令

      # --- Python 脚本运行步骤 ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # 指定 Python 版本

      - name: Run Python preprocessing script
        run: python config_qrc.py

      - name: Install Qt
        # 使用一个非常方便的第三方 Action 来安装 Qt
        # 'aqtinstall' 是一个开源的 Qt 安装工具
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }} # 使用环境变量
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64' # 指定 MinGW 工具链
          modules: 'qtwebengine qtwebchannel qtpositioning'# 列出你需要的额外模块

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build Project
        run: cmake --build build --config Release

      - name: Debug - List Build Directory Contents
        run: Get-ChildItem -Path build -Recurse

      - name: Prepare Artifacts for Upload
        # 【【【决定性的最终修正 - Part 2: 相信证据】】】
        # 我们现在根据证据，从正确的、不带 'Release' 的路径复制文件
        run: |
          New-Item -ItemType Directory -Force deploy
          
          # 定义正确的源路径，这次它没有 'Release'
          $sourcePath = "build\bin"
          
          Write-Host "Copying files from the proven location: $sourcePath"
          
          # 从正确的路径复制 .exe
          Copy-Item -Path "$sourcePath\Debug\QtWebSchoolSys.exe" -Destination "deploy\"
          
          # 从正确的路径复制 web 文件夹
          Copy-Item -Path "$sourcePath\web" -Destination "deploy\" -Recurse
          
          # 从项目根目录复制 icons 文件夹 (如果存在)
          if (Test-Path -Path "icons") {
            Copy-Item -Path "icons" -Destination "deploy\" -Recurse
          }
          
          Write-Host "Running windeployqt on deploy\QtWebSchoolSys.exe..."
          & "$env:QT_ROOT_DIR\bin\windeployqt.exe" --release --no-translations --no-opengl-sw "deploy\QtWebSchoolSys.exe"

      - name: Upload Artifact
        # 将打包好的 deploy 文件夹作为一个构建产物上传
        uses: actions/upload-artifact@v4
        with:
          name: QtWebSchoolSys-Windows
          path: deploy/